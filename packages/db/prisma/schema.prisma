// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model College {
    id      String    @id @default(cuid())
    name    String
    users   User[]
    courses Course[]
    Track   Track[]
    Subject Subject[]
}

model Course {
    id       String     @id @default(cuid())
    name     String
    colleges College[]
    tracks   Track[]
    users    User[]
    Semister Semister[]
    Subject  Subject[]
}

enum Semister {
    First
    Second
    Third
    Fourth
    Fifth
    Sixth
    Seventh
    Eighth
}

model User {
    id           String       @id @default(cuid())
    name         String?
    email        String?      @unique
    password     String?
    image        String?
    role         Role         @default(user)
    collegeId    String?
    college      College?     @relation(fields: [collegeId], references: [id])
    token        String?
    hashedSecret String?
    courseId     String?
    course       Course?      @relation(fields: [courseId], references: [id])
    semister     Semister?
    submissions  Submission[]
    quizScores   QuizScore[]
    Track        Track[]
}

enum Role {
    user
    professor
    admin
}

model Submission {
    id                 String           @id @default(uuid())
    code               String
    language           CodeLanguage     @relation(fields: [codeLanguageId], references: [id])
    codeLanguageId     Int
    statusId           Int
    statusDesc         String
    runtime            Int //in ms
    memoryUsage        Int //in bytes
    errorMessage       String?
    testCasesPassed    Int
    problemStatement   ProblemStatement @relation(fields: [problemStatementId], references: [id])
    problemStatementId String
    user               User?            @relation(fields: [userId], references: [id])
    userId             String?
    createdAt          DateTime         @default(now())
    lastTestCase       TestCase?        @relation(fields: [lastTestCaseId], references: [id])
    lastTestCaseId     String?
    stdout             String?
}

model CodeLanguage {
    id          Int          @id
    value       String
    label       String
    programs    Program[]
    submissions Submission[]
}

model TestCase {
    id                 String           @id @default(uuid())
    input              String
    expectedOutput     String
    hidden             Boolean          @default(false)
    problemStatementId String
    problemStatement   ProblemStatement @relation(fields: [problemStatementId], references: [id])
    Submission         Submission[]
}

model Program {
    id               String           @id @default(uuid())
    boilerPlateCode  String
    mainCode         String
    correctCode      String
    problemId        String           @unique
    problemStatement ProblemStatement @relation(fields: [problemId], references: [id], onDelete: Cascade)
    codeLaungageId   Int              @unique
    codeLaungage     CodeLanguage     @relation(fields: [codeLaungageId], references: [id], onDelete: Cascade)
}

model ProblemStatement {
    id          String       @id @default(uuid())
    programs    Program[]
    problemId   String?      @unique
    problem     Problem?     @relation(fields: [problemId], references: [id], onDelete: Cascade)
    testCases   TestCase[]
    submissions Submission[]
}

model Problem {
    id               String            @id @default(uuid())
    title            String
    description      String
    notionDocId      String
    sortingOrder     Int?
    trackId          String?           @unique
    track            Track?            @relation(fields: [trackId], references: [id], onDelete: Cascade)
    problemType      ProblemType
    problemStatement ProblemStatement?
    MCQQuestion      MCQQuestion?
    QuizScore        QuizScore?
}

model MCQQuestion {
    id            String   @id @default(uuid())
    question      String
    options       String[]
    correctOption String
    problemId     String?  @unique
    problem       Problem? @relation(fields: [problemId], references: [id], onDelete: Cascade)
}

enum ProblemType {
    Blog
    Code
    MCQ
}

model QuizScore {
    id        String   @id @default(uuid())
    score     Int
    user      User?    @relation(fields: [userId], references: [id])
    userId    String?
    problemId String   @unique
    problem   Problem? @relation(fields: [problemId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
}

model Track {
    id          String    @id @default(uuid())
    title       String
    description String
    image       String
    subjectId   String
    subject     Subject   @relation(fields: [subjectId], references: [id])
    courseId    String
    Problems    Problem[]
    course      Course    @relation(fields: [courseId], references: [id])
    semister    Semister
    collegeId   String
    college     College   @relation(fields: [collegeId], references: [id])
    autherId    String
    createdBy   User      @relation(fields: [autherId], references: [id])
    hidden      Boolean   @default(false)
    createdAt   DateTime  @default(now())
}

model Subject {
    id        String   @id @default(uuid())
    name      String
    semister  Semister
    courseId  String
    course    Course   @relation(fields: [courseId], references: [id])
    collegeId String
    college   College  @relation(fields: [collegeId], references: [id])
    Track     Track[]
}
